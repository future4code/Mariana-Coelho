{"version":3,"sources":["logo.svg","imagens/thumb1.png","imagens/thumb2.png","imagens/thumb3.png","imagens/thumb4.png","imagens/thumb5.png","imagens/thumb6.png","imagens/thumb7.png","imagens/thumb8.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","type","id","placeholder","class","href","src","require","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,wFC0E5BC,MAtEf,WACE,OACE,yBAAKC,UAAU,OACZ,gCACC,2CAIA,6BACI,2BAAOC,KAAK,OAAOC,GAAG,WAAWC,YAAY,YAGjD,yBAAKD,GAAG,kBACJ,6BAASA,GAAG,gBACR,wCACA,sCACA,+CACA,2CACA,0CAGR,6BAASA,GAAG,eACR,yBAAKE,MAAM,aACP,uBAAGC,KAAK,qBAAoB,yBAAKC,IAAKC,EAAQ,OAC9C,mDAGJ,yBAAKH,MAAM,aACH,uBAAGC,KAAK,qBAAoB,yBAAKC,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,SAC/F,2CAGJ,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,QAC/D,qCAGR,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,QAC/D,qCAGR,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,QAC/D,wCAGR,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,QAC/D,sCAGR,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAwBC,MAAM,OAAOC,OAAO,QAC9D,yCAGR,yBAAKL,MAAM,aACH,yBAAKE,IAAKC,EAAQ,IAAyBC,MAAM,OAAOC,OAAO,QAC/D,yCAIhB,4DCvDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0207d77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumb1.d351bf0e.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb2.9b446de7.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb3.ae07fbfb.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb4.08033db9.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb5.6f3c9061.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb6.cee61311.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb7.aab9a352.png\";","module.exports = __webpack_public_path__ + \"static/media/thumb8.56b1937d.png\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <header>\n        <div>\n            FutureTube\n        </div>\n\n        <div>\n            <input type=\"text\" id=\"txtbusca\" placeholder=\"Busca\"></input>\n        </div>\n    </header>\n        <div id=\"main-container\">\n            <section id=\"menu-lateral\">\n                <p>Início</p>\n                <p>Em alta</p>\n                <p>Inscrições</p>\n                <p>Histórico</p>\n                <p>Biblioteca</p>\n            </section>\n\n        <section id=\"grid-videos\">\n            <div class=\"grid-item\">\n                <a href=\"futurevideo1.html\"><img src={require('./imagens/thumb1.png')}/></a>\n                <p>A beleza da Irlanda</p>\n            </div>\n\n            <div class=\"grid-item\">\n                    <a href=\"futurevideo2.html\"><img src={require('./imagens/thumb2.png')} width=\"100%\" height=\"80%\"></img></a>\n                <p>Hemácias</p>\n            </div>\n\n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb3.png')} width=\"100%\" height=\"80%\"></img>\n                    <p>Tinta</p>\n            </div>\n            \n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb4.png')} width=\"100%\" height=\"80%\"></img>\n                    <p>Praia</p>\n            </div>\n\n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb5.png')} width=\"100%\" height=\"80%\"></img>\n                    <p>Névoa</p>\n            </div>\n          \n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb6.png')} width=\"100%\" height=\"80%\"></img>\n                    <p>Coelho</p>\n            </div>\n\n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb7.png')}width=\"100%\" height=\"80%\"></img>\n                    <p>Espaço</p>\n            </div>\n          \n            <div class=\"grid-item\">\n                    <img src={require('./imagens/thumb8.png')} width=\"100%\" height=\"80%\"></img>\n                    <p>Foguete</p>\n            </div>\n        </section>\n      </div>  \n    <footer>\n        Oi! Eu moro no footer.\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}